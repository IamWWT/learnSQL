CH 3
求帮助----------------------------------------
shell> mysql --help

连接、断开服务器------------------------------
shell> mysql -h host -u user -p
Enter password: ***
mysql>QUIT
或者
shell> mysql -u user -p
Enter password: ***
mysql> QUIT


进入查询---------------------------------------
mysql> SELECT VERSION(), CURRENT_DATA;	--打印当前版本号和日期。
# 一个查询=一个SQL语句+一个分号。
# 有些不需要分号的例外：QUIT
# 关键字不区分大小写，下面的等价。
mysql> select vErSiOn(), current_DATA;
mysql> SELECt version(), current_data;


mysql> SELECT SIN(PI()/4), (1+4)*5;	--打印计算结果。
mysql> SELECT VERSION(); SELECT NOW();	--打印版本，当前时间，在两个表内。

多线/行语句----
mysql> SELECT
    -> USER()
    -> ,
    -> CURRENT_DATE;
如果输入到一半，不想执行这个语句了，输入\c。
mysql> SELECT
    -> USER()
    -> \c

状态解释-------------------------------------------
mysql>			准备好了for新Query
->			等待下一个多线Query
'>			等待下一条线，等待单引号'的对应。
">			等待下一条线，等待双引号“的对应。
'>			等待下一条线，等待反引号`的对应。
			反引号=英文输入法下的左上角1旁边的符号。
/*>			等待下一条线，等待/*的对应。


创建\使用数据库---------------------------------------------------
mysql> SHOW DATABASES;		---显示有5个数据库，其中test数据库作为users可用的工作空间。
mysql> USE test			---USE和QUIT一样，不需要分号，所以USE比较特殊，必须一句一行。
mysql> CREATE DATABASE wang;	---database名字是case-sensitive的（不像SQL关键字），所以必须总是称自己的database为wang，而不能是Wang,WANG，或者其他变体。
mysql> USE wang
## 你的database只需要创建一次，但每次用它的时候都要USE语句用。
----------另一种代替USE的用法：登陆数据库时候。
shell> mysql -h host -u user -p wang


创建表--------------------------------------------------
mysql> SHOW TABLES
# 此时是一个空表，假设想创建一个pet表，如下：
mysql> CREATE TABLE pet (
    -> name VARCHAR(20),
    -> owner VARCHAR(20),
    -> species VARCHAR(20),
    -> sex CHAR(1),
    -> birth DATE,
    -> death DATE);
-------------------VARCHAR中，可正常选的数字 从1-65535.
如果你选错长度了（20太小了如果），你想要更长field，MySQL提供了语句：ALTER TABLE
-------------------创建好了之后，再SHOW TABLES; 就看见wang数据库中有了pet表。
##验证你创建的表符合期望，用DESCRIBE。
mysql> DESCRIBE pet;


加载数据入表--------------------------------------------------
LOAD DATA和INSERT语句。
=========
因为 开始创建的是一个空表， 一个容易的填充它的方法是，创造一个text文件，包含一个动物的一行记录。这行内容的顺序和创建表的顺序一致，没有值用NULL,文件中用\N表示，然后加载文件内容到表中，形成一行语句。
比如，pet.txt中是
Whistler	Gwen	bird 	\N	1997-12-09	\N
------ERROR------------
mysql> LOAD DATA LOCAL INFILE 'D:/Users/MyPython18/Case/learnSQL/pet.txt' INTO TABLE pet;
ERROR 1148 (42000): The used command is not allowed with this MySQL version
解决：
1-方法
mysql> SHOW VARIABLES LIKE '%local%';	--- 得到local_infile OFF, 即刻变量未开启
解决：
mysql> SET GLOBAL local_infile=1;	--- 没有解决

2-方法
重新登陆，如下方式：
PS D:\Users\MyPython18\Case\learnSQL> mysql --local-infile -uroot -p123
再次输入：
mysql> LOAD DATA LOCAL INFILE 'D:/Users/MyPython18/Case/learnSQL/pet.txt' INTO TABLE pet;
Query OK, 1 row affected, 1 warning (0.12 sec)
Records: 1  Deleted: 0  Skipped: 0  Warnings: 1
问题解决~ ~ ~ ~ ~

3-官网上的，没试。
https://dev.mysql.com/doc/refman/8.0/en/load-data-local.html
简要：对mysql用户，默认不启动local data loading，用--local-infile=0 或--local-infile[=1]实现不启动或启动。
在option files的[client] group中加入一个local-infile选项，阻止该问题，具体是用了loose-前缀：
[client]
loose-local-infile=0
或
[client]
loose-local-infile=1
总结下来，我理解的是，其实和2一样吧，只不过2登陆后所有database都被这样设置了，而3的是只给wang的数据库设置了。
---------SOLVED--------------------
NOTE: 如果文件是windows下的编辑器，用\r\n作为行终止符，语句应该变为：OA
mysql> LOAD DATA LOCAL INFILE '/path/pet.txt' INTO TABLE pet
       LINES TERMINATED BY '\r\n';

接着ERROR之前的内容，再开始看第二个填充表的方法。
===========
内容直接插入表中。
mysql> INSERT INTO pet VALUES ('Puffbal', 'Diane', 'hamster','f','1999-03-30',NULL);
Query OK, 1 row affected (0.09 sec)
----容易看到DATE类型和VARCHAR类型的输入都是单引号形式''。
此时不再是\N，而是NULL。



回溯表中信息---------------------------------------------------
SELECT what_to_selct		----表中拉取列信息,想看什么信息。可以是a list of columns，或者，*表示all columns。简要，即，字段的有序集合。
FROM which_talbe		----选表，你想追溯数据来自哪一个表。
WHERE conditions_tosatisfy	----可选语句，。

mysql> SELECT * FROM pet;	---因为上面，加入了两条记录到表中，可以看到表中有两条记录。

现在根据教程中的数据库表信息补到9条记录：
发现：表中显示的顺序，是按照添加的时间顺序存放的。

修改表中信息-----------------------------------------------------
某一行输入错了，怎么修改？
1. pet.txt中导入的，在pet.txt中修改，然后用DELETE和LOAD DATA修改。
mysql> DELETE FROM PET;
mysql> LOAD DATA LOCAL INFILE 'D:/Users/MyPython18/Case/learnSQL/pet.txt' INTO TABLE pet;
2. 如果只有一条记录出错了，用UPDATE语句
mysql> UPDATE pet SET species = 'dog' WHERE name = 'Fang';
Query OK, 1 row affected (0.04 sec)
Rows matched: 1  Changed: 1  Warnings:

NOTE：windows下，导入时必须加入第二条语句，不然\N会显示不是NULL，而是00000。
--
mysql> LOAD DATA LOCAL INFILE 'D:/Users/MyPython18/Case/learnSQL/pet.txt' INTO TABLE pet
    -> LINES TERMINATED BY '\r\n';
Query OK, 9 rows affected, 2 warnings (0.07 sec)
Records: 9  Deleted: 0  Skipped: 0  Warnings: 2

mysql> SELECT * FROM pet;
+----------+--------+---------+------+------------+------------+
| name     | owner  | species | sex  | birth      | death      |
+----------+--------+---------+------+------------+------------+
| Fluffy   | Harold | cat     | f    | 1993-02-04 | NULL       |
| Claws    | Gwen   | cat     | m    | 1994-03-17 | NULL       |
| Buffy    | Harold | dog     | f    | 1989-05-13 | NULL       |
| Fang     | Benny  | dog     | m    | 1990-08-27 | NULL       |
| Bowser   | Diane  | dog     | m    | 1979-08-31 | 1995-07-29 |
| Chirpy   | Gwen   | bird    | f    | 1998-09-11 | NULL       |
| Whistler | Gwen   | bird    | NULL | 1997-12-09 | NULL       |
| Slim     | Benny  | snake   | m    | 1996-04-29 | NULL       |
| Puffball | Diane  | hamster | f    | 1999-03-30 | NULL       |
+----------+--------+---------+------+------------+------------+
9 rows in set (0.00 sec)



选择特定行------------------------------------------------------------------
mysql> SELECT * FROM pet WHERE name = 'Bowser';
+--------+-------+---------+------+------------+------------+
| name   | owner | species | sex  | birth      | death      |
+--------+-------+---------+------+------------+------------+
| Bowser | Diane | dog     | m    | 1979-08-31 | 1995-07-29 |
+--------+-------+---------+------+------------+------------+
1 row in set (0.00 sec)

--------------------------------------------------------------------
mysql> SELECT * FROM pet WHERE birth = '1998-9-11';;
+--------+-------+---------+------+------------+-------+
| name   | owner | species | sex  | birth      | death |
+--------+-------+---------+------+------------+-------+
| Chirpy | Gwen  | bird    | f    | 1998-09-11 | NULL  |
+--------+-------+---------+------+------------+-------+
1 row in set (0.00 sec)

mysql> SELECT * FROM pet WHERE birth >= '1998-1-1';
+----------+-------+---------+------+------------+-------+
| name     | owner | species | sex  | birth      | death |
+----------+-------+---------+------+------------+-------+
| Chirpy   | Gwen  | bird    | f    | 1998-09-11 | NULL  |
| Puffball | Diane | hamster | f    | 1999-03-30 | NULL  |
+----------+-------+---------+------+------------+-------+
2 rows in set (0.00 sec)

选择逻辑与或非应用-------------------------------------------------------------------
mysql> SELECT * FROM pet WHERE species = 'dog' AND sex ='f';
+-------+--------+---------+------+------------+-------+
| name  | owner  | species | sex  | birth      | death |
+-------+--------+---------+------+------------+-------+
| Buffy | Harold | dog     | f    | 1989-05-13 | NULL  |
+-------+--------+---------+------+------------+-------+
1 row in set (0.00 sec)

mysql> SELECT * FROM pet WHERE species = 'snake' OR species ='bird';
+----------+-------+---------+------+------------+-------+
| name     | owner | species | sex  | birth      | death |
+----------+-------+---------+------+------------+-------+
| Chirpy   | Gwen  | bird    | f    | 1998-09-11 | NULL  |
| Whistler | Gwen  | bird    | NULL | 1997-12-09 | NULL  |
| Slim     | Benny | snake   | m    | 1996-04-29 | NULL  |
+----------+-------+---------+------+------------+-------+
3 rows in set (0.00 sec)

mysql> SELECT * FROM pet WHERE (species = 'cat' AND sex='m') OR (species ='dog' AND sex='f');
+-------+--------+---------+------+------------+-------+
| name  | owner  | species | sex  | birth      | death |
+-------+--------+---------+------+------------+-------+
| Claws | Gwen   | cat     | m    | 1994-03-17 | NULL  |
| Buffy | Harold | dog     | f    | 1989-05-13 | NULL  |
+-------+--------+---------+------+------------+-------+
2 rows in set (0.00 sec)

选择特定列------------------------------------------------------------------------------
mysql> SELECT name,birth FROM pet;
+----------+------------+
| name     | birth      |
+----------+------------+
| Fluffy   | 1993-02-04 |
| Claws    | 1994-03-17 |
| Buffy    | 1989-05-13 |
| Fang     | 1990-08-27 |
| Bowser   | 1979-08-31 |
| Chirpy   | 1998-09-11 |
| Whistler | 1997-12-09 |
| Slim     | 1996-04-29 |
| Puffball | 1999-03-30 |
+----------+------------+
9 rows in set (0.00 sec)

mysql> SELECT owner FROM pet;
+--------+
| owner  |
+--------+
| Harold |
| Gwen   |
| Harold |
| Benny  |
| Diane  |
| Gwen   |
| Gwen   |
| Benny  |
| Diane  |
+--------+
9 rows in set (0.00 sec)

DISTINCT找出不重复的主人。
mysql> SELECT DISTINCT owner FROM pet;
+--------+
| owner  |
+--------+
| Harold |
| Gwen   |
| Benny  |
| Diane  |
+--------+
4 rows in set (0.04 sec)


条件寻找-------------------------------------------------------------------------
mysql> SELECT name,species,birth FROM pet WHERE species='dog' OR species = 'cat';
+--------+---------+------------+
| name   | species | birth      |
+--------+---------+------------+
| Fluffy | cat     | 1993-02-04 |
| Claws  | cat     | 1994-03-17 |
| Buffy  | dog     | 1989-05-13 |
| Fang   | dog     | 1990-08-27 |
| Bowser | dog     | 1979-08-31 |
+--------+---------+------------+
5 rows in set (0.00 sec)


行排序----------------------------------------------------------------
按照生日排序,默认上到下升序：
mysql> SELECT name, birth FROM pet ORDER BY birth;
+----------+------------+
| name     | birth      |
+----------+------------+
| Bowser   | 1979-08-31 |
| Buffy    | 1989-05-13 |
| Fang     | 1990-08-27 |
| Fluffy   | 1993-02-04 |
| Claws    | 1994-03-17 |
| Slim     | 1996-04-29 |
| Whistler | 1997-12-09 |
| Chirpy   | 1998-09-11 |
| Puffball | 1999-03-30 |
+----------+------------+
9 rows in set (0.00 sec)
按照上到下，降序：
mysql> SELECT name, birth FROM pet ORDER BY birth DESC;
+----------+------------+
| name     | birth      |
+----------+------------+
| Puffball | 1999-03-30 |
| Chirpy   | 1998-09-11 |
| Whistler | 1997-12-09 |
| Slim     | 1996-04-29 |
| Claws    | 1994-03-17 |
| Fluffy   | 1993-02-04 |
| Fang     | 1990-08-27 |
| Buffy    | 1989-05-13 |
| Bowser   | 1979-08-31 |
+----------+------------+
9 rows in set (0.00 sec)
双列，先排序前一个指定的字段，再排序后一个字段，排序降序------------------------------------------
mysql> SELECT name, species, birth FROM pet
    ->        ORDER BY species, birth DESC;
+----------+---------+------------+
| name     | species | birth      |
+----------+---------+------------+
| Chirpy   | bird    | 1998-09-11 |
| Whistler | bird    | 1997-12-09 |
| Claws    | cat     | 1994-03-17 |
| Fluffy   | cat     | 1993-02-04 |
| Fang     | dog     | 1990-08-27 |
| Buffy    | dog     | 1989-05-13 |
| Bowser   | dog     | 1979-08-31 |
| Puffball | hamster | 1999-03-30 |
| Slim     | snake   | 1996-04-29 |
+----------+---------+------------+
9 rows in set (0.00 sec)




数据计算---------------------------------------------------------------------------------
TIMESTAMPDIFF()函数，计算时间差，你的宠物多大了。
CURDATE()是当前日期。
-------------------------------------------------------------
mysql> SELECT name, birth, CURDATE(),
    ->        TIMESTAMPDIFF(YEAR,birth,CURDATE()) AS age
    ->        FROM pet;
+----------+------------+------------+------+
| name     | birth      | CURDATE()  | age  |
+----------+------------+------------+------+
| Fluffy   | 1993-02-04 | 2019-07-25 |   26 |
| Claws    | 1994-03-17 | 2019-07-25 |   25 |
| Buffy    | 1989-05-13 | 2019-07-25 |   30 |
| Fang     | 1990-08-27 | 2019-07-25 |   28 |
| Bowser   | 1979-08-31 | 2019-07-25 |   39 |
| Chirpy   | 1998-09-11 | 2019-07-25 |   20 |
| Whistler | 1997-12-09 | 2019-07-25 |   21 |
| Slim     | 1996-04-29 | 2019-07-25 |   23 |
| Puffball | 1999-03-30 | 2019-07-25 |   20 |
+----------+------------+------------+------+
9 rows in set (0.04 sec)

计算年龄并分别按名字、年龄增序排序-----------------------------------------------------------------
mysql> SELECT name, birth, CURDATE(),
    ->        TIMESTAMPDIFF(YEAR,birth,CURDATE()) AS age
    ->        FROM pet ORDER BY name;
+----------+------------+------------+------+
| name     | birth      | CURDATE()  | age  |
+----------+------------+------------+------+
| Bowser   | 1979-08-31 | 2019-07-25 |   39 |
| Buffy    | 1989-05-13 | 2019-07-25 |   30 |
| Chirpy   | 1998-09-11 | 2019-07-25 |   20 |
| Claws    | 1994-03-17 | 2019-07-25 |   25 |
| Fang     | 1990-08-27 | 2019-07-25 |   28 |
| Fluffy   | 1993-02-04 | 2019-07-25 |   26 |
| Puffball | 1999-03-30 | 2019-07-25 |   20 |
| Slim     | 1996-04-29 | 2019-07-25 |   23 |
| Whistler | 1997-12-09 | 2019-07-25 |   21 |
+----------+------------+------------+------+
9 rows in set (0.00 sec)

mysql> SELECT name, birth, CURDATE(),
    ->        TIMESTAMPDIFF(YEAR,birth,CURDATE()) AS age
    ->        FROM pet ORDER BY age;
+----------+------------+------------+------+
| name     | birth      | CURDATE()  | age  |
+----------+------------+------------+------+
| Chirpy   | 1998-09-11 | 2019-07-25 |   20 |
| Puffball | 1999-03-30 | 2019-07-25 |   20 |
| Whistler | 1997-12-09 | 2019-07-25 |   21 |
| Slim     | 1996-04-29 | 2019-07-25 |   23 |
| Claws    | 1994-03-17 | 2019-07-25 |   25 |
| Fluffy   | 1993-02-04 | 2019-07-25 |   26 |
| Fang     | 1990-08-27 | 2019-07-25 |   28 |
| Buffy    | 1989-05-13 | 2019-07-25 |   30 |
| Bowser   | 1979-08-31 | 2019-07-25 |   39 |
+----------+------------+------------+------+
9 rows in set (0.00 sec)


按照给定的出生死亡时间计算年龄，并以年龄增序排序。-------------------------------------------
mysql> SELECT name, birth, death,
    ->        TIMESTAMPDIFF(YEAR,birth,death) AS age
    ->        FROM pet WHERE death IS NOT NULL ORDER BY age;
+--------+------------+------------+------+
| name   | birth      | death      | age  |
+--------+------------+------------+------+
| Bowser | 1979-08-31 | 1995-07-29 |   15 |
+--------+------------+------------+------+
1 row in set (0.00 sec)
其中，IS NOT NULL 表示，死亡是NULL的情况下，不采用该条记录，因为无法计算。


MySQL中用来提取日期具体年月日的函数：YEAR(),MONTH,DAYOFMONTH().------------------------------------
mysql>  SELECT name, birth, MONTH(birth) FROM pet;
+----------+------------+--------------+
| name     | birth      | MONTH(birth) |
+----------+------------+--------------+
| Fluffy   | 1993-02-04 |            2 |
| Claws    | 1994-03-17 |            3 |
| Buffy    | 1989-05-13 |            5 |
| Fang     | 1990-08-27 |            8 |
| Bowser   | 1979-08-31 |            8 |
| Chirpy   | 1998-09-11 |            9 |
| Whistler | 1997-12-09 |           12 |
| Slim     | 1996-04-29 |            4 |
| Puffball | 1999-03-30 |            3 |
+----------+------------+--------------+
9 rows in set (0.00 sec)

mysql> SELECT name, birth FROM pet WHERE MONTH(birth) = 5;
+-------+------------+
| name  | birth      |
+-------+------------+
| Buffy | 1989-05-13 |
+-------+------------+
1 row in set (0.00 sec)

DATE_ADD()函数加日期。下例是当前日期2019/7/25加一个月份后的情况：------------------------------
即，宠物出生日期是7+1=8月份的有哪些。
mysql> SELECT name, birth FROM pet
    -> WHERE MONTH(birth) = MONTH(DATE_ADD(CURDATE(),INTERVAL 1 MONTH));
+--------+------------+
| name   | birth      |
+--------+------------+
| Fang   | 1990-08-27 |
| Bowser | 1979-08-31 |
+--------+------------+
2 rows in set (0.04 sec)

----下例是当前月份（7月）除以12的余数+1，本质也是往前加了一个月，即，宠物出生月份是7+1=8月份的有哪些。
mysql> SELECT name, birth FROM pet
    -> WHERE MONTH(birth) = MOD(MONTH(CURDATE()), 12) + 1;
+--------+------------+
| name   | birth      |
+--------+------------+
| Fang   | 1990-08-27 |
| Bowser | 1979-08-31 |
+--------+------------+
2 rows in set (0.00 sec)

无效情况-------------------------------------------------------------------------------------
正确。
mysql>  SELECT '2018-10-31' + INTERVAL 1 DAY;
+-------------------------------+
| '2018-10-31' + INTERVAL 1 DAY |
+-------------------------------+
| 2018-11-01                    |
+-------------------------------+
1 row in set (0.00 sec)
错误，无效。
mysql> SELECT '2018-10-32' + INTERVAL 1 DAY;
+-------------------------------+
| '2018-10-32' + INTERVAL 1 DAY |
+-------------------------------+
| NULL                          |
+-------------------------------+
1 row in set, 1 warning (0.00 sec)
警告信息。
mysql> SHOW WARNINGS;
+---------+------+----------------------------------------+
| Level   | Code | Message                                |
+---------+------+----------------------------------------+
| Warning | 1292 | Incorrect datetime value: '2018-10-32' |
+---------+------+----------------------------------------+
1 row in set (0.00 sec)


NULL检测---------------------------------------------------------------------------------------
用 IS NULL 和 IS NOT NULL算子。---------------------------------
mysql>  SELECT 1 IS NULL, 1 IS NOT NULL;
+-----------+---------------+
| 1 IS NULL | 1 IS NOT NULL |
+-----------+---------------+
|         0 |             1 |
+-----------+---------------+
1 row in set (0.00 sec)

mysql> SELECT 0 IS NULL, 0 IS NOT NULL, '' IS NULL, '' IS NOT NULL;
+-----------+---------------+------------+----------------+
| 0 IS NULL | 0 IS NOT NULL | '' IS NULL | '' IS NOT NULL |
+-----------+---------------+------------+----------------+
|         0 |             1 |          0 |              1 |
+-----------+---------------+------------+----------------+
1 row in set (0.00 sec)

不能用=，<, >检测NULL--------------------------------------------
因为任何和NULL的比较都是NULL。没有意义的NULL，比较也没有意义。
mysql>  SELECT 1 = NULL, 1 <> NULL, 1 < NULL, 1 > NULL;
+----------+-----------+----------+----------+
| 1 = NULL | 1 <> NULL | 1 < NULL | 1 > NULL |
+----------+-----------+----------+----------+
|     NULL |      NULL |     NULL |     NULL |
+----------+-----------+----------+----------+
1 row in set (0.00 sec)

------------------------------------------------------------------------------------------------
模式匹配-------------------------------------------------------------------------------------------
MySQL提供标准SQL模式匹配和类似的扩展的规则表达式，相似于Unix utilities如vi, grep, sed。

SQL pattern matching允许用_to匹配任何 单字符(character)，用%匹配任意个数的字符(characters)。
SQL pattern 默认是case-insensitivity的。当用SQL patterns时，不要用=或<>，用LIKE或NOT LIKE比较算子。

例子：
name中，b开头的，fy结尾的，中间含w的----------------------------------------------
mysql> SELECT * FROM pet WHERE name LIKE 'b%';
+--------+--------+---------+------+------------+------------+
| name   | owner  | species | sex  | birth      | death      |
+--------+--------+---------+------+------------+------------+
| Buffy  | Harold | dog     | f    | 1989-05-13 | NULL       |
| Bowser | Diane  | dog     | m    | 1979-08-31 | 1995-07-29 |
+--------+--------+---------+------+------------+------------+
2 rows in set (0.00 sec)

mysql>  SELECT * FROM pet WHERE name LIKE '%fy';
+--------+--------+---------+------+------------+-------+
| name   | owner  | species | sex  | birth      | death |
+--------+--------+---------+------+------------+-------+
| Fluffy | Harold | cat     | f    | 1993-02-04 | NULL  |
| Buffy  | Harold | dog     | f    | 1989-05-13 | NULL  |
+--------+--------+---------+------+------------+-------+
2 rows in set (0.00 sec)

mysql>  SELECT * FROM pet WHERE name LIKE '%w%';
+----------+-------+---------+------+------------+------------+
| name     | owner | species | sex  | birth      | death      |
+----------+-------+---------+------+------------+------------+
| Claws    | Gwen  | cat     | m    | 1994-03-17 | NULL       |
| Bowser   | Diane | dog     | m    | 1979-08-31 | 1995-07-29 |
| Whistler | Gwen  | bird    | NULL | 1997-12-09 | NULL       |
+----------+-------+---------+------+------------+------------+
3 rows in set (0.00 sec)

name个数是五个字符的------------------------------------------------------
五个_。
mysql>  SELECT * FROM pet WHERE name LIKE '_____';
+-------+--------+---------+------+------------+-------+
| name  | owner  | species | sex  | birth      | death |
+-------+--------+---------+------+------------+-------+
| Claws | Gwen   | cat     | m    | 1994-03-17 | NULL  |
| Buffy | Harold | dog     | f    | 1989-05-13 | NULL  |
+-------+--------+---------+------+------------+-------+
2 rows in set (0.00 sec)

用开头字符字符b匹配，^表示只用开头，REGEXP_LIKE表示只是比较开头------------------
mysql> SELECT * FROM pet WHERE REGEXP_LIKE(name, '^b');
+--------+--------+---------+------+------------+------------+
| name   | owner  | species | sex  | birth      | death      |
+--------+--------+---------+------+------------+------------+
| Buffy  | Harold | dog     | f    | 1989-05-13 | NULL       |
| Bowser | Diane  | dog     | m    | 1979-08-31 | 1995-07-29 |
+--------+--------+---------+------+------------+------------+
2 rows in set (0.06 sec)
------ERROR CASE ---------------------
mysql> SELECT * FROM pet WHERE REGEXP_LIKE(name, '^b' COLLATE utf8mb4_0900_as_cs);
ERROR 1253 (42000): COLLATION 'utf8mb4_0900_as_cs' is not valid for CHARACTER SET 'utf8'
mysql> SELECT * FROM pet WHERE REGEXP_LIKE(name, BINARY '^b');
Empty set (0.04 sec)

mysql> SELECT * FROM pet WHERE REGEXP_LIKE(name, '^b', 'c');
Empty set (0.00 sec)
---------------------------------------

结尾字符匹配$---------------------------------------------
mysql> SELECT * FROM pet WHERE REGEXP_LIKE(name, 'fy$');
+--------+--------+---------+------+------------+-------+
| name   | owner  | species | sex  | birth      | death |
+--------+--------+---------+------+------------+-------+
| Fluffy | Harold | cat     | f    | 1993-02-04 | NULL  |
| Buffy  | Harold | dog     | f    | 1989-05-13 | NULL  |
+--------+--------+---------+------+------------+-------+
2 rows in set (0.00 sec)

不加$或者^时表示任意位置匹配-------------------------
mysql> SELECT * FROM pet WHERE REGEXP_LIKE(name, 'w');
+----------+-------+---------+------+------------+------------+
| name     | owner | species | sex  | birth      | death      |
+----------+-------+---------+------+------------+------------+
| Claws    | Gwen  | cat     | m    | 1994-03-17 | NULL       |
| Bowser   | Diane | dog     | m    | 1979-08-31 | 1995-07-29 |
| Whistler | Gwen  | bird    | NULL | 1997-12-09 | NULL       |
+----------+-------+---------+------+------------+------------+
3 rows in set (0.00 sec)

五个.和开头^结尾$字符表示找是五个字符长度的名字。
mysql> SELECT * FROM pet WHERE REGEXP_LIKE(name, '^.....$');
+-------+--------+---------+------+------------+-------+
| name  | owner  | species | sex  | birth      | death |
+-------+--------+---------+------+------------+-------+
| Claws | Gwen   | cat     | m    | 1994-03-17 | NULL  |
| Buffy | Harold | dog     | f    | 1989-05-13 | NULL  |
+-------+--------+---------+------+------------+-------+
2 rows in set (0.00 sec)

5个.重复的等价写法.{5}OD
mysql>  SELECT * FROM pet WHERE REGEXP_LIKE(name, '^.{5}$');
+-------+--------+---------+------+------------+-------+
| name  | owner  | species | sex  | birth      | death |
+-------+--------+---------+------+------------+-------+
| Claws | Gwen   | cat     | m    | 1994-03-17 | NULL  |
| Buffy | Harold | dog     | f    | 1989-05-13 | NULL  |
+-------+--------+---------+------+------------+-------+
2 rows in set (0.00 sec)


---------------------------------------------------------------------------------------------
计算rows数目。COUNT(*)---------------------------
mysql> SELECT COUNT(*) FROM pet;
+----------+
| COUNT(*) |
+----------+
|        9 |
+----------+
1 row in set (0.04 sec)


分组查询----------------------------------------------------------------------
理解：COUNT里面的*是每个owner的名字。----
mysql> SELECT owner, COUNT(*) FROM pet GROUP BY owner;
+--------+----------+
| owner  | COUNT(*) |
+--------+----------+
| Harold |        2 |
| Gwen   |        3 |
| Benny  |        2 |
| Diane  |        2 |
+--------+----------+
4 rows in set (0.00 sec)

mysql> SELECT species, COUNT(*) FROM pet GROUP BY species;
+---------+----------+
| species | COUNT(*) |
+---------+----------+
| cat     |        2 |
| dog     |        3 |
| bird    |        2 |
| snake   |        1 |
| hamster |        1 |
+---------+----------+
5 rows in set (0.00 sec)

mysql> SELECT sex, COUNT(*) FROM pet GROUP BY sex;
+------+----------+
| sex  | COUNT(*) |
+------+----------+
| f    |        4 |
| m    |        4 |
| NULL |        1 |
+------+----------+
3 rows in set (0.00 sec)

理解：COUNT里面的*是每个species和sex为一组对。
mysql> SELECT species, sex, COUNT(*) FROM pet GROUP BY species, sex;
+---------+------+----------+
| species | sex  | COUNT(*) |
+---------+------+----------+
| cat     | f    |        1 |
| cat     | m    |        1 |
| dog     | f    |        1 |
| dog     | m    |        2 |
| bird    | f    |        1 |
| bird    | NULL |        1 |
| snake   | m    |        1 |
| hamster | f    |        1 |
+---------+------+----------+
8 rows in set (0.00 sec)


理解：COUNT里面的*是每个species和sex为一组对，和上面表比较发现只是少了部分内容没显示，但COUNT计算的数目不变。
mysql> SELECT species, sex, COUNT(*) FROM pet
    ->        WHERE species = 'dog' OR species = 'cat'
    ->        GROUP BY species, sex;
+---------+------+----------+
| species | sex  | COUNT(*) |
+---------+------+----------+
| cat     | f    |        1 |
| cat     | m    |        1 |
| dog     | f    |        1 |
| dog     | m    |        2 |
+---------+------+----------+
4 rows in set (0.00 sec)


性别不是NULL的所有的由species, sex组合决定COUNT的表示：
mysql> SELECT species, sex, COUNT(*) FROM pet
    ->        WHERE sex IS NOT NULL
    ->        GROUP BY species, sex;
+---------+------+----------+
| species | sex  | COUNT(*) |
+---------+------+----------+
| cat     | f    |        1 |
| cat     | m    |        1 |
| dog     | f    |        1 |
| dog     | m    |        2 |
| bird    | f    |        1 |
| snake   | m    |        1 |
| hamster | f    |        1 |
+---------+------+----------+
7 rows in set (0.00 sec)


-------------------ERROR----------------------
如果，ONLY_FULL_GROUP_BY模式开启，会出错如下,此时，只可以计算主键的全部记录个数，而不能分组计算。

mysql> SET sql_mode = 'ONLY_FULL_GROUP_BY';
Query OK, 0 rows affected (0.00 sec)

mysql> SELECT owner, COUNT(*) FROM pet;
ERROR 1140 (42000): In aggregated query without GROUP BY, expression #1 of SELECT list contains nonaggregated column 'wang.pet.owner'; this is incompatible with sql_mode=only_full_group_by


mysql> SET sql_mode = 'ONLY_FULL_GROUP_BY';
Query OK, 0 rows affected (0.00 sec)

mysql>  SELECT *, COUNT(*) FROM pet;
ERROR 1140 (42000): In aggregated query without GROUP BY, expression #1 of SELECT list contains nonaggregated column 'wang.pet.name'; this is incompatible with sql_mode=only_full_group_by
mysql>  SELECT COUNT(*) FROM pet;
+----------+
| COUNT(*) |
+----------+
|        9 |
+----------+
1 row in set (0.00 sec)


mysql>  SET sql_mode = '';
Query OK, 0 rows affected (0.00 sec)

mysql>  SELECT owner, COUNT(*) FROM pet;
+--------+----------+
| owner  | COUNT(*) |
+--------+----------+
| Harold |        9 |
+--------+----------+
1 row in set (0.00 sec)
----------------------------------------------



---------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------
使用多个表------------------------------------------------------
新建一个event表，含有名字name，日期date，类型type，标记reamrk。
mysql> LOAD DATA LOCAL INFILE 'D:/Users/MyPython18/Case/learnSQL/event.txt' INTO TABLE event
    -> LINES TERMINATED BY'\r\n';
Query OK, 10 rows affected (0.08 sec)
Records: 10  Deleted: 0  Skipped: 0  Warnings: 0

mysql> SELECT * FROM event
    -> ;
+----------+------------+----------+-----------------------------+
| name     | date       | type     | remark                      |
+----------+------------+----------+-----------------------------+
| Fluffy   | 1995-05-15 | litter   | 4 kittens, 3 female, 1 male |
| Buffy    | 1993-06-23 | litter   | 5 puppies, 2 female, 3 male |
| Buffy    | 1994-06-19 | litter   | 3 puppies, 3 female         |
| Chirpy   | 1999-03-21 | vet      | needed beak straightened    |
| Slim     | 1997-08-03 | vet      | broken rib                  |
| Bowser   | 1991-10-12 | kennel   |                             |
| Fang     | 1991-10-12 | kennel   |                             |
| Fang     | 1998-08-28 | birthday | Gave him a new chew toy     |
| Claws    | 1998-03-17 | birthday | Gave him a new flea collar  |
| Whistler | 1998-12-09 | birthday | First birthday              |
+----------+------------+----------+-----------------------------+
10 rows in set (0.00 sec)

---------------------------------------------------------------------------------
关联两个表：---------------------------------------------------------------------
TIMESTAMPDIFF是按年计算，data减去birth，表示的是多少岁时候发生的event。

mysql> SELECT pet.name,
    ->        TIMESTAMPDIFF(YEAR,birth,date) AS age,
    ->        remark
    ->        FROM pet INNER JOIN event
    ->          ON pet.name = event.name
    ->        WHERE event.type = 'litter';
+--------+------+-----------------------------+
| name   | age  | remark                      |
+--------+------+-----------------------------+
| Fluffy |    2 | 4 kittens, 3 female, 1 male |
| Buffy  |    4 | 5 puppies, 2 female, 3 male |
| Buffy  |    5 | 3 puppies, 3 female         |
+--------+------+-----------------------------+
3 rows in set (0.00 sec)

表示pet表中没有死亡（IS NULL）且是female，
    event表中没有死亡	    且是male，
    且
    pet表和event表是一个物种时的两个表分别的name sex和species。
 简要：
 找到pet表中的两个表中的共有物种，这种物种的特征是：表一是磁性没死，表二是雄性没死。OB
mysql> SELECT p1.name, p1.sex, p2.name, p2.sex, p1.species
    ->        FROM pet AS p1 INNER JOIN pet AS p2
    ->          ON p1.species = p2.species
    ->          AND p1.sex = 'f' AND p1.death IS NULL
    ->          AND p2.sex = 'm' AND p2.death IS NULL;
+--------+------+-------+------+---------+
| name   | sex  | name  | sex  | species |
+--------+------+-------+------+---------+
| Fluffy | f    | Claws | m    | cat     |
| Buffy  | f    | Fang  | m    | dog     |
+--------+------+-------+------+---------+
2 rows in set (0.00 sec)




-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
查看当前服务器管理的所有数据库。用SHOW DATABASES;------------- 

查看当前数据库。----------------------------------------------
mysql> SELECT DATABASE();
+------------+
| DATABASE() |
+------------+
| wang       |
+------------+
1 row in set (0.00 sec)
查看当前数据库下的表。------------------------------------------
mysql> SHOW TABLES;
+----------------+
| Tables_in_wang |
+----------------+
| event          |
| pet            |
+----------------+
2 rows in set (0.00 sec)


CH3.5 Using MySQL in Batch Mode.

--ref: https://dev.mysql.com/doc/refman/8.0/en/batch-mode.html
